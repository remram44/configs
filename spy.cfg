exec autoexec

// This is similar to autoexec, but sets spy_viewmodel to what is expected from
// the weapon selection
alias spy_viewmodel_on  "viewmodel_on"
alias spy_viewmodel_off "viewmodel_off"

// This is another level of indirection; those are used by weapons, but are
// overridden by the watch
alias spy_viewmodel_on2  "alias spy_viewmodel viewmodel_on;  spy_viewmodel_on"
alias spy_viewmodel_off2 "alias spy_viewmodel viewmodel_off; spy_viewmodel_off"

// super_on sets the viewmodel to visible and prevents viewmodel_off from being
// called; weapon selection won't do anything while the watch is out
alias spy_viewmodel_super_on  "viewmodel_on; alias spy_viewmodel_off nop; alias spy_viewmodel_super_toggle spy_viewmodel_super_off"
alias spy_viewmodel_super_off "spy_viewmodel; alias spy_viewmodel_off viewmodel_off; alias spy_viewmodel_super_toggle spy_viewmodel_super_on"
alias spy_viewmodel_super_toggle "spy_viewmodel_super_on"
bind k "spy_viewmodel_super_off"

// Using the watch toggles the super state
// Warning: we can't know if the watch was actually toggled...
alias +watch_toggle "+attack2"
alias -watch_toggle "-attack2; spy_viewmodel_super_toggle"
bind mouse2 "+watch_toggle"

// Changing weapon changes the viewmodel state, but only if the watch is not
// being used
bind 1 "slot1; spy_viewmodel_off2"
bind 2 "slot2; spy_viewmodel_on2"
bind 3 "slot3; spy_viewmodel_on2"
bind 4 "slot4; spy_viewmodel_off2"
bind 5 "lastdisguise"
bind a "disguiseteam"
bind mouse4 "voicemenu 1 7" // "charge ready"

spy_viewmodel_off

echo "SPY SCRIPT LOADED"
